import re, json

# IMPORTANT NOTE: AS WITH ALL PYTHON CODING, PROPER INDENTATION IS NECESSARY TO PREVENT ERRORS.
# PROGRAMS LIKE NOTEPAD++ DO NOT ALWAYS LINE UP PROPERLY OR CATCH THESE INDENTION ERRORS. TO
# PREVENT THESE AND OTHER PYTHON ERRORS, BEFORE RUNNING THE PROGRAM IN PLEX OR AFTER MAKING CHANGES
# TO THE FILE, I OPEN IT FIRST IN A LOCAL VERSION OF PYTHON I HAVE LOADED AND CHOOSE
# RUN > CHECK MODULE TO FIND ANY POSSIBLE PROBLEMS.
# These are python variables you set up for use later in this file   
# The naming and values are based on the where and how you choose to use them in your code
# For the most part, you are defining variables you will use in the PlayVideo function

ART      = 'art-default.jpg'
ICON     = 'icon-default.png'

BASE_URL = 'http://vtele.ca'
# It is best practice to use regex when possible and avoid importing any Python modules, so below is a regex statement I use
# later in my PlayVideo function to find the video info xml address within the page that allows me to easily pull the 
# web pages corresponding video file location
RE_XML_URL = Regex("/xml/video(.+?)',")
# The variable below is basic regex to pull a video from an html page.  I show its use in a optional version of the PlayVideo function
# RE_VIDEO_URL = Regex('videofile:"(?P<video_url>[^"]+)"')
# IMPORTANT NOTE: THE VALUE OF 'URL' THAT IS PASSED TO THE DIFFERENT FUNCTIONS IN THIS PROGRAM IS DETERMINED EITHER 
# WITHIN THE PROGRAMMING OF THE INDIVIDUAL CHANNEL PLUGIN THAT USES THIS URL SERVICE OR BY THE END USER CHOOSING THE PLEXIT BUTTON
########################################################################################################
# BELOW IS AN OPTIONAL CODE FOR CONVERTING HTML VIDEO PAGES TO THEIR CORRESPONDING VIDEO INFO XML PAGES.
# IF YOU CAN FIND REFERENCE TO THESE XML VIDEO INFO FILES ON THE VIDEO WEBPAGES, THESE XML PAGES CAN BE 
# USED FOR EASY RETRIEVAL OF METADATA AND VIDEO FILES USING XML.ElementFromURL. 
# We use string.replace() to create a new url that adds /xml/video-folder/ to middle and changes the extension to .xml.  
########################################################################################################
XML_URL = BASE_URL.replace('http://www.anywebsite.com/', 'http://www.anywebsite.com/xml/videos-page/').replace('.html',
                                                                                                               '.xml')


####################################################################################################
# This pulls the metadata that is used for Plexit, suggested videos (to friends), the pre-play screen on iOS, Roku, Android and Plex/Web, 
# as well as if you get the "info" or "details" within the OSX/Windows/Linux desktop client.
# Afer you pull the data you should save it to preset variables.  These basic variables are title, summary, and thumb. 
# but some also include duration, and originally_available_at, content_rating, show, tags and index 

def MetadataObjectForURL(url):
    # Here you are using the ElementFromURL() API to parse or pull up all the data from the webpage.
    # See the Framework documentation API reference for all the choices for parsing data
    page = HTML.ElementFromURL(url)

    # Extract the data available on the page using xpath commands.
    # Think about what will access the metadata from this URL service to determine what info you want to extract here
    # Below is a basic example that pulls the the title, description and thumb from the head of a html document that makes a request of this URL Service
    title = page.xpath("//head//meta[@property='og:title']")[0].get('content')
    description = page.xpath("//head//meta[@property='og:description']")[0].get('content')
    if "sq.vtele.ca" in url:
        thumb = "http://sq.vtele.ca/img/elements/backgrounds/video.jpg"
    else:
        thumb = page.xpath("//head//meta[@property='og:image']")[0].get('content').replace("_playover", "")
    # This command returns the metadata values you extracted as a video clip object.
    # See the Framework documentation API reference for all the choices of objects to return metadata
    return VideoClipObject(
        title=title,
        summary=description,
        thumb=Resource.ContentsOfURLWithFallback(thumb, fallback=R(ART)),
    )


####################################################################################################
# Here you will define the different types of videos available on this website and the values for their quality
# You will need to search the source of the web pages that play a video to determine the type and location of videos offered thru the site
# You can see if the name and location is available through an embed link, but you may have to look into the subpages for a web page
# like javascript or style sheets to find this information. You will also need this information later when 
# writing the code for the PlayVideo function that pulls these specific video files from the webpage
def MediaObjectsForURL(url):
    arrStreams = getStreamsURL(url)
    arrMediaObject = []
    for video in arrStreams:
        Log("VideoURL: " + video['defaultURL'])
        arrMediaObject.append(
            MediaObject(
            video_codec=VideoCodec.H264,
            video_resolution=video['width'],
            audio_channels=2,
            container='mp4',
            parts=[PartObject(key=Callback(PlayVideo, url=url, res=video['width']))]
            )
        )
    return arrMediaObject

####################################################################################################
# Here we are defining the PlayVideo function we called in the callback function above. This function defines the pattern for 
# the location and naming scheme of the video so we can play the video file directly. You use HTML request, regular expressions,
# and predefined variables to create the path or http address of the video associated with the html or xml page that was sent 
# to this service through the "URL" value. The programming here will vary greatly based on the location of the 
# video file related to your video pages. This is where you will be doing the majority to the programming.
# It is best to refer to other services already created for examples of how to pull the video file.

# First we define the function taking the the variables for the url entered into the service and the
# fmt variable we established above in MediaObjects

# We add the @indirect decorator to the function definition to notify the client Plex app that the response from this callback
# will be another ObjectContainer rather than a link to a media file. This works better for most clients as well as allowing for
# more advanced practices such as using RTMP or including Cookies to be passed to the player.
# The @indirect decorator is paired with the "IndirectResponse()" that is returned at the end of the function.
# Note: if your MediaObject includes more than one PartObject, it is better to leave off the @indirect decorator and return a
# Redirect() rather than the IndirectResponse().
@indirect
def PlayVideo(url, res):
    arrStreams = getStreamsURL(url)
    videoStream = arrStreams[0]
    for video in arrStreams:
        if video['width'] == res:
            videoStream = video
            break

    return IndirectResponse(VideoClipObject, key=videoStream['defaultURL'])



#####################################################
# The code below does the magic
# It fetches the urls, passes the HTTP REFERER, etc.
'''
    PARAMS:
        1: videoPlayer=
        2: additionalAdTargetingParams=
        3: startTime=
        4: refURL=
'''
URL_PLAYER = "http://c.brightcove.com/services/viewer/htmlFederated?&width=640&height=360&flashID=mainPlayer&bgcolor=%23000000&wmode=opaque&isVid=true&isUI=true&dynamicStreaming=true&autoStart=false&allowFullScreen=true&%40videoPlayer=%s&includeAPI=true&allowScriptAccess=always&showNoContentMessage=true&playerID=2852956699001&playerKey=AQ~~%2CAAAAkAV1KVk~%2C3a02lxSo0UDkABa1913QCmvnpLrAVqIT&playerType=MainPlayerVideo&templateLoadHandler=V.vp.mainPlayer.templateLoaded&templateReadyHandler=V.vp.mainPlayer.templateReady&templateErrorHandler=V.vp.mainPlayer.templateError&adServerURL=http%3A%2F%2Fd.adgear.com%2Fimpressions%2Fuint_nc%2Fasc%3D4430%2Ff%3D29%2Fchip%3Dd575787025470131d2a50024e87a30c2.xml%3F&additionalAdTargetingParams=%s&debuggerID=&startTime=%s&refURL=%s"
URL2 = "http://c.brightcove.com/services/viewer/htmlFederated?&width=640&height=360&flashID=mainPlayer&bgcolor=%23000000&wmode=opaque&isVid=true&isUI=true&dynamicStreaming=true&autoStart=false&allowFullScreen=true&%40videoPlayer=4573468607001&includeAPI=true&allowScriptAccess=always&showNoContentMessage=true&playerID=2852956699001&playerKey=AQ~~%2CAAAAkAV1KVk~%2C3a02lxSo0UDkABa1913QCmvnpLrAVqIT&playerType=MainPlayerVideo&templateLoadHandler=V.vp.mainPlayer.templateLoaded&templateReadyHandler=V.vp.mainPlayer.templateReady&templateErrorHandler=V.vp.mainPlayer.templateError&adServerURL=http%3A%2F%2Fd.adgear.com%2Fimpressions%2Fuint_nc%2Fasc%3D4431%2Ff%3D29%2Fchip%3De22ca44025470131d2a00024e87a30c2.xml%3F&additionalAdTargetingParams=AG_P2%3Drpm-plus%26idbc%3D4573468607001%26pageURL%3Dhttp%25253A%25252F%25252Fauto.vtele.ca%25252Fvideos%25252Frpm-plus%25252Fle-metier-de-lettreur-et-marc-lachapelle-journaliste-automobile_85313.php&debuggerID=&startTime=1445954877558&refURL=http://vtele.ca/videos/scorpion/au-nom-du-pere_85353.php"
USER_AGENT = 'Mozilla/5.0 (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53'
REF_URL = "http://auto.vtele.ca/videos/rpm/ultra-mousse-et-lave-cire-disparu-la-scion-xd_84635_84605.php"

def getParamJSON(source):
    strRegex = 'customKeyValue: (\{.+?\})'
    reMatch = Regex(strRegex).search(source)
    jsonString = reMatch.group(1).replace("'", '"')
    jsonMatch = json.loads(jsonString)
    return jsonMatch

def getParamIDBC(source):
    arrRegex = [
        '{\'idbc\': \'(.+?)\'',     # Normal video
        'idBC:"(.+?)"'              # sq.vtele.ca
    ]
    for strRegex in arrRegex:
            reMatch = re.search(strRegex, source, re.IGNORECASE)
            if reMatch != None:
                return reMatch.group(1)
    # Nothing found
    return None

def getParamVideoPlayer():
    pass

def getParamAdditionalAdTargetingPArams():
    #jsonMatch = getParamJSON(source)
    return ""
    #return urllib.quote(urllib.urlencode(jsonMatch), safe='')
    #return "additionalAdTargetingParams=AG_P2%3Dscorpion%26idbc%3D4578799607001%26pageURL%3D" + TEST_URL

def getParamStartTime():
    pass

def getParamRefURL(self):
    return REF_URL
    pass

def getPageSource(url, user_agent=USER_AGENT):
    headers = {'User-Agent': user_agent, "referer": REF_URL}
    r = HTTP.Request(url, headers=headers, encoding="ISO-8859-1")
    return r.content
    # req = urllib2.Request(url, None, headers)
    # response = urllib2.urlopen(req)
    # return response.read()

def getBestStreamURL(url):
    arrStreams = getStreamsURL(url)
    largerBitRate = 0
    for video in arrStreams:
        encodingRate = int(video["encodingRate"])
        if encodingRate > largerBitRate:
            bestVideoURL = video["defaultURL"]
            largerBitRate = encodingRate
    return bestVideoURL

def getStreamsURL(url):
    arrStreams = []
    testPageSource = getPageSource(url)
    paramAdditonalAd = "" # getParamAdditionalAdTargetingPArams(testPageSource)
    paramVideoPlayer = getParamIDBC(testPageSource)
    paramRefURL = getParamRefURL(testPageSource)
    #paramStartTime = str(int(time.mktime(datetime.datetime.now().timetuple()))) + "653"
    paramStartTime = "1445956838653"

    # Now we can retrieve the MP4 Player URL
    mp4Source = getPageSource(URL_PLAYER.replace("%s", paramVideoPlayer, 1).replace("%s", paramAdditonalAd, 1).replace("%s", paramStartTime, 1).replace("%s", paramRefURL))

    # Get all streams
    strRegex = '"renditions":(\[.+?\])'
    reMatch = re.search(strRegex, mp4Source)
    jsonMatch = json.loads(unicode(reMatch.group(1).replace("'", '"')))

    for video in jsonMatch:
        encodingRate = int(video["encodingRate"])
        defaultURL = video["defaultURL"]
        height = int(video["frameHeight"])
        width = 1080 if int(video["frameWidth"]) > 1080 else int(video["frameWidth"])
        size = int(video["size"])
        videoCodec = video["videoCodec"]
        arrStreams.append({
            "encodingRate"  : encodingRate,
            "defaultURL"    : defaultURL,
            "height"        : height,
            "width"         : width,
            "size"          : size,
            "videoCodec"    : videoCodec
        })

    arrStreams = sorted(arrStreams, key=lambda k: k['width'])[::-1] # [::-1] to reverse the list

    return arrStreams